Welcome to CS 106B Shrink-It!
This program uses the Huffman coding algorithm for compression.
Any file can be compressed by this method, often with substantial
savings. Decompression will faithfully reproduce the original.

1) build character frequency table
2) build encoding tree
3) build encoding map
4) encode data
5) decode data

C) compress file
D) decompress file
F) free tree memory

B) binary file viewer
T) text file viewer
S) side-by-side file comparison
Q) quit

Your choice? 1
Read from a s)tring or f)ile? f
File name to process: example2.txt
Building frequency table ...
ab ab cab!
     32:  ' '  =>       2
     33:  '!'  =>       1
     97:  'a'  =>       3
     98:  'b'  =>       3
     99:  'c'  =>       1
    256:  EOF  =>       1
6 character frequencies found.

1) build character frequency table
2) build encoding tree
3) build encoding map
4) encode data
5) decode data

C) compress file
D) decompress file
F) free tree memory

B) binary file viewer
T) text file viewer
S) side-by-side file comparison
Q) quit

Your choice? 2
Building encoding tree ...
      {' ' (32), count=2}
    {NOT, count=3}
      {EOF (256), count=1}
  {NOT, count=6}
    {'b' (98), count=3}
{NOT, count=11}
    {'a' (97), count=3}
  {NOT, count=5}
      {'c' (99), count=1}
    {NOT, count=2}
      {'!' (33), count=1}

1) build character frequency table
2) build encoding tree
3) build encoding map
4) encode data
5) decode data

C) compress file
D) decompress file
F) free tree memory

B) binary file viewer
T) text file viewer
S) side-by-side file comparison
Q) quit

Your choice? 3
Building encoding map ...
     32:  ' '  => 111
     33:  '!'  => 000
     97:  'a'  => 01
     98:  'b'  => 10
     99:  'c'  => 001
    256:  EOF  => 110
6 character encodings found.

1) build character frequency table
2) build encoding tree
3) build encoding map
4) encode data
5) decode data

C) compress file
D) decompress file
F) free tree memory

B) binary file viewer
T) text file viewer
S) side-by-side file comparison
Q) quit

Your choice? 4
Reuse your previous string/file data for encoding? y
Encoding data ...
Here is the binary encoded data (4 bytes):
01101110 11011100 10110000 11000000 

1) build character frequency table
2) build encoding tree
3) build encoding map
4) encode data
5) decode data

C) compress file
D) decompress file
F) free tree memory

B) binary file viewer
T) text file viewer
S) side-by-side file comparison
Q) quit

Your choice? 5
Read from a s)tring or f)ile? s
Type the string to process: 01101110 11011100 10110000 11000000
Decoding data ...
Here is the decoded data (10 bytes):
ab ab cab!

1) build character frequency table
2) build encoding tree
3) build encoding map
4) encode data
5) decode data

C) compress file
D) decompress file
F) free tree memory

B) binary file viewer
T) text file viewer
S) side-by-side file comparison
Q) quit

Your choice? 